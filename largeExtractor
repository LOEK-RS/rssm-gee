//// Landsat Yearly Index Composite Time Series
// Computes a Landsat (vegetation) index time series with a yearly resolution.
// How the months of a year are aggeragted can be selected with "reducer"

//// RETURN
// Multi-Layer Image, each layer is a year


//// PARAMETERS

// aois - FeatureCollection: contains multiple areas of interest
var aois = ee.FeatureCollection("projects/ee-ludwigm6/assets/peat/natura2000_moorwaelder_develsample");

// index - string: NDVI
var index = "NDVI"

// Define startYear and endYear - numeric
var startYear = 1985;
var endYear = 2023;


// startMonth and endMonth - numeric
// months for each year to aggregate. This can be used to e.g. only select the vegetation period
var startMonth = 6;
var endMonth = 9;

// choose reducer to aggregate the months (see reducer_list below)
var reducer = "median"

var reducer_list = {'median': ee.Reducer.median(),
                    '10mean90': ee.Reducer.intervalMean(10,90),
                    'p90': ee.Reducer.percentile([90]),
                    'p10': ee.Reducer.percentile([10]),
                    'mean': ee.Reducer.mean()
}







//#########################################################################




function maskLcl(image) {
  // Bit 0 - Fill
  // Bit 1 - Dilated Cloud
  // Bit 2 - Unused
  // Bit 3 - Cloud
  // Bit 4 - Cloud Shadow
  // Bit 5 - Snow
  //var snowBit = 1 << 6;
  var qaMask = image.select('QA_PIXEL').bitwiseAnd(parseInt('111111', 2)).eq(0)
  //  .and(image.select('QA_PIXEL').bitwiseAnd(snowBit).eq(0));
  var saturationMask = image.select('QA_RADSAT').eq(0);

  // Apply the scaling factors to the appropriate bands.
  var opticalBands = image.select(['RED', 'NIR']).multiply(0.0000275).add(-0.2);
  // Replace the original bands with the scaled ones and apply the masks.
  return image.addBands(opticalBands, null, true)
      .updateMask(qaMask)
      .updateMask(saturationMask)
      //.unmask(-99999);
}



// Rename bands, because Bands are different for different satellites
var name_standard = ['RED', 'NIR', 'QA_PIXEL', 'QA_RADSAT']


// Define function ndvi
var ndvi = function(img){
    var ndvi = img.expression('(NIR-RED)/(NIR+RED)', {
              'NIR': img.select('NIR'),
              'RED': img.select('RED')
              }).rename('NDVI').toFloat();
    ndvi = ndvi.updateMask(ndvi.gt(0)).updateMask(ndvi.lt(1))
    return img.addBands(ndvi)
  }




extracted = aois.map(function(aoi){
  
  
  
  
  
  
  
})

























print(aois.geometry())


print(aois.first())
var l9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
  .filterBounds(aois.first().geometry())
  .filter(ee.Filter.calendarRange(startYear, endYear, 'year'))
  .filter(ee.Filter.calendarRange(startMonth, endMonth, 'month'))
  //.filter(ee.Filter.lt('CLOUD_COVER', 80))
  .select(['SR_B4'])
  .toBands()
  .unmask()

print(l9)

Map.addLayer(l9, {}, "L9 First")



var extracted = aois.map(function(feature){
  
  
  var l9 = ee.ImageCollection('LANDSAT/LC09/C02/T1_L2')
  .filterBounds(feature.geometry())
  .filter(ee.Filter.calendarRange(startYear, endYear, 'year'))
  .filter(ee.Filter.calendarRange(startMonth, endMonth, 'month'))
  //.filter(ee.Filter.lt('CLOUD_COVER', 80))
  .select(['SR_B4'])
  .toBands()

  return ee.Feature(feature.geometry(),
  l9.reduceRegion({
    reducer: ee.Reducer.median(),
    geometry: feature.geometry(),
    scale: 30
  }))
  
  
})


print(extracted)





Map.addLayer(aois, {}, "moore")

Map.addLayer(extracted, {}, "ext")


Export.table.toDrive({
  collection: extracted,
  folder: "gee"
  
})



//var extracted = point.map(function (feature) {
//  return ee.Feature(feature.geometry(), neighborhoods.reduceRegion({
//    reducer: ee.Reducer.first(), 
//    geometry: feature.geometry(), 
//    scale: 30
  //}))
//})


















